# Backend Ray Tracer for Diagrams
  -Author: Alexander Lochmann
  -Supervisor: Michael FÃ¤rber

# Haskell
  --Haskell is a functional programming language.
  --In functional programming, programs are executed by evaluating expressions.
  --Haskell is also pure, because it doesn't allow side effects.
  --In Haskell expressions are only evaluated when the result is needed for further
     evaluations, this is called lazy evaluation.

# Domain-Specific Language
  --Domain is a field of study that defines a set of common requirements and terminology.
  --Domain-Specific Language(DSL) is a tool to simplify expressing and solving problems in a defined domain.
  ---Embedded DSL:
  ----A library implemented in the host language (normally a general-purpose language), providing greater abstractions related to the domain.
  ---External DSL:
  ----A independent language with tools(parser, interpreters,\ldots)

# Diagrams
  --Diagrams is embedded DSL to describe 2D and 3D Scenes.
  --This allows to combine the expression power of Haskell with
     readable scene defining DSL Diagrams.
  --Following is a fully described scene in Diagrams:

  #### insert sniped

# Ray tracing
  --Technique to render a image from a defined scene.
  --Basic introduction to the idea:
  ---Generate rays, starting from the camera, a ray per pixel.
  ---Intersect rays with geometry.
  ---Calculate pixel color with the resulting values (shading)

# My work
  --Become acquainted with Haskell, Diagrams and ray tracing.
  --Extract scene information from Diagrams.
  --Implement ray tracer in Haskell that uses the data from diagrams
  ---Supporting the features from Diagrams (shapes, projections, \ldots)
